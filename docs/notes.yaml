General:
  - Vendor neutral data models written in YANG #Define the modesl that communicate to a switch to configure things.
  - Created from customers / Operators
  - Model based configuration.  Data ia structured
  - Replacement for SNMP
  - Need a unique model for all network devices.

YANG:
  - RFC 6020
  - Model definition language
  - Yet Another Generation.
  - Created early 2000's.
  - Best thing at the time for modeling language.
  - Operators already knew YANG structure.
  - http://ops.openconfig.net/branches/models/ #Gives you the tree structure visualization tells you what the yang model is leaf, leaf-list, container etc.
  YANG: #From RFC 6020
    container: a reference to child nodes container nodes do not have a value and holds a single argument.  Fixed set of attributes.
    leaf nodes: contains data like a integer or a string it has a single value
    leaf-list nodes: sequence of leaf nodes holding a value each leaf
    list: Collections of containers

#Example of a YANG model
module bleh {
Container foo  {
    list bar  {
        key baz;
        leaf baz{
            type string;
        }
    }
}
}

^^^^
module: blah
  +--rw foo
      +-- bar* [baz]
          type    string

  - containers #entity
  list: #Collections has KV's you identify keys to the list.
    - baz is the key to the list above

#This can be accessed within the path of /foo/bar/baz

Transport: #Slide 4
  - NETCONF:
    - RFC 6241 #XML Over SSH
  - RESTCONF:
    - RFC 8040 #Basic rest
  - GNMI / GRPC:
    capabilities:
      - CapabilityRequest
      - GetRequest
      - SetRequest
      - SubscribeRequest
    - Proto Buffers + JSON over HTTP2

Arista:
  - Location of Openconfig modules  /usr/share/yang/modules/github.com/openconfig/public/release/models/
  - Agent maps data from netdb <-> YANG models.
  - Written in Go
  - CPU
  - SMASH
  - Show how to do each transport configs

Openconfig_changes: #Slide 5
  - Merge - Merge subtree with another
  - get - Takes in a path and returns data from the tree
  - Replace - Replace a tree with another
  - Delete - Deletes a subtree at path
  - subscribe - If using GNMI streams the model
  - update - Updates the tree

yang to code:
  - pyang
  - goyang

GRPC_Interfaces:
  - GNMI #Network management
  - GNOI #Network operations interface
  - GRIBI #Routing interface

snmp_limitations: #Show a slide with 2.3.34.4.2.5.2.34.
  - Polling method.
  - Read write mibs
  - single udp transport
  - older than me.
  - Poor performance for bulk data(UDP) ie acls millions, bgp routes millions
  - mid design
  - Difficult for replacement of cli completely or config completely or to manage the entire state

syslog_limitations:
  - UDP transport
  - Non structured data
  - Every vendor is different

grpc:
  - Removed the needs for restful services
  - Sends over a rpc which is really like a method/function call
  - When files are created there are 2 files .proto create the pb2.py and pb.
  - Rest/versRPC:
    - Rest:
      - resource focus
      - HTTP
      - Only GET,POST,PUT and Delete
      - Typically text only based
      - Human readable
    - GRPC:
      - Action focus
      - Emrbaces functions , methods just like a programming language
      - Client needs to know about arguments methods and data once it gets it
      - Leverage binary based messaged not text... so its quicker faster
      - Not human readable because of proto buffs
      - Idea is that everything goes to protobufs and supports multiple language
  - GRPC:
    - Idea is that a client application can call a method on a server like it were local to the device.
    - Protobufs allow for serialization of all the data for any programming language to understand.
    - JSON also works.
    - IDL = Interface definition language(Python,Go etc)
    - service = on the server slide
    - stub = Client side application.
    - Idea is for multi langauges and performance
    - Also supports bidirectional streaming
  - Kafka:
    - Broker = single node
    - Multiple brokers = Cluster
    - Messages are written by Producers in Topics

links:
  - https://github.com/influxdata/telegraf/tree/master/plugins/inputs/jti_openconfig_telemetry
  - https://github.com/grahamneville/octsdb/blob/master/README.md
